(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'creator_id'"
p3
sS'layer'
p4
S'/home/john/Downloads/web2py/applications/inlrn/controllers/default.py'
p5
sS'code'
p6
S'################################################################\n####controllers#################################################\n################################################################\n  \n################################\n####about#######################\n################################\ndef about():\n   \n    return dict()\n\n################################\n####academy#####################\n################################                    \ndef academy():\n    \n    #if \n    try:\n        academy_from_url = db(db.academy.url_title == request.args(0)).select()\n        academy_id_from_url = db(db.academy.url_title == request.args(0)).select()[0][\'id\']\n\n        academy_courses = db(db.course.academy_id_array.contains(academy_id_from_url)).select()\n\n\n    except IndexError:\n        redirect(URL(\'academies\'))\n   \n    return dict(\n        \n        academy_id_from_url=academy_id_from_url,\n        academy_from_url=academy_from_url,\n        academy_courses=academy_courses,\n    )\n\n################################\n####academies###################\n################################        \ndef academies():\n\n    academy_list = db(db.academy).select()\n   \n    return dict(academy_list=academy_list)\n\n################################\n####account#####################\n################################        \ndef account():\n   \n    return dict()  \n    \n################################\n####contact#####################\n################################\ndef contact():\n   \n    return dict()\n\n################################\n####course######################\n################################            \ndef course():\n   \n    try:\n        course_from_url = db(db.course.url_title == request.args(0)).select()[0][\'title\']\n    except IndexError:\n        redirect(URL(\'courses\'))\n    \n    \n    return dict(course_from_url=course_from_url)\n   \n\n################################\n####courses#####################\n################################        \ndef courses():\n\n    course_list = db(db.course).select()\n   \n    return dict(course_list=course_list)            \n\n################################\n####discover####################\n################################        \ndef discover():\n\n    return dict()\n\n################################\n####faq#########################\n################################                  \ndef faq():\n\n    return dict()\n\n################################\n####feed########################\n################################\ndef feed():\n   \n    return dict()\n    \n################################\n####inbox#######################\n################################ \ndef inbox():\n   \n    return dict()\n\n################################\n####index#######################\n################################        \ndef index():\n\n    import random\n    academy_list = db(db.academy).select().as_list() \n    random.shuffle(academy_list)\n    academy_list = academy_list[0:5]\n   \n    return dict(academy_list=academy_list)\n\n################################\n####mission#####################\n################################        \ndef mission():\n\n    return dict()\n\n################################\n####member######################\n################################        \ndef member():\n\n    try:\n        username_from_url = db(db.auth_user.username == request.args(0)).select()[0][\'username\']\n        id_from_url = db(db.auth_user.username == request.args(0)).select()[0][\'id\']\n        #courses_distributed = db(db.auth_user.id == db.course.creator_id).select()\n        #courses_distributed_num = len(courses_distributed)\n        courses = db(db.course_member.auth_user_id == id_from_url).select(join=db.course.on(db.course.id==db.course_member.creator_id), orderby=db.course_member.join_time)\n        \n    except IndexError:\n        redirect(URL(\'members\'))\n    \n    \n    return dict(username_from_url=username_from_url, \n            courses = courses,\n            )\n    \n################################\n####members#####################\n################################        \ndef members():\n   \n    return dict()     \n\n################################\n####notifications###############\n################################        \ndef notifications():\n   \n    return dict() \n################################\n####privacy#####################\n################################\ndef privacy():\n   \n    return dict()\n\ndef stats():\n   \n    return dict()   \n\n################################\n####search######################\n################################        \ndef search():\n   \n    return dict()  \n     \n################################\n####tag#########################\n################################          \ndef tag():\n   \n    return dict()\n    \n################################\n####tags########################\n################################          \ndef tags():\n   \n    return dict()   \n\n################################\n####terms#######################\n################################\ndef terms():\n   \n    return dict()\n\n################################\n####thread######################\n################################          \ndef thread():\n   \n    return dict()\n\n################################\n####threads#####################\n################################          \ndef threads():\n   \n    return dict()\n    \n################################\n####transparency################\n################################\ndef transparency():\n\n    return dict()\n    \n\n################################################################\n####ajax########################################################\n################################################################    \n            \n################################################################\n####helpers#####################################################\n################################################################\n\n################################\n####download####################\n################################   \n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n################################\n####call########################\n################################ \ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n################################\n####data########################\n################################ \n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(member)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/john/Downloads/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/john/Downloads/web2py/applications/inlrn/controllers/default.py", line 273, in <module>\n  File "/home/john/Downloads/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/john/Downloads/web2py/applications/inlrn/controllers/default.py", line 138, in member\n    courses = db(db.course_member.auth_user_id == id_from_url).select(join=db.course.on(db.course.id==db.course_member.creator_id), orderby=db.course_member.join_time)\n  File "/home/john/Downloads/web2py/gluon/dal.py", line 8912, in __getitem__\n    return ogetattr(self, str(key))\nAttributeError: \'Table\' object has no attribute \'creator_id\'\n'
p11
s.